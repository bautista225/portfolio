---
import ArrowDownUpIcon from "../icons/ArrowDownUp.astro";
import SpanishFlagIcon from "../icons/SpanishFlag.astro";
import BritishFlagIcon from "../icons/BritishFlag.astro";

const THEMES = ["Español", "English"];

const THEME_CODES = {
  Español: "es",
  English: "en",
};
---

<div class="px-2">
  <button
    transition:persist
    id="languages-toggle-btn"
    class="cursor-pointer appearance-none border-none flex hover:scale-125 transition justify-center items-center"
  >
    <ArrowDownUpIcon class="size-3 transition-all mr-1" />
    <SpanishFlagIcon
      id="es"
      class="languages-toggle-icon size-5 transition-all"
    />
    <BritishFlagIcon
      id="en"
      class="languages-toggle-icon size-5 transition-all"
    />
  </button>
  <div
    transition:persist
    id="languages-menu"
    class="absolute hidden top-10 right-0 text-sm p-1 min-w-[6rem] rounded-md border border-gray-500/20 bg-neutral-900/40 backdrop-blur-sm shadow-[0_3px_10px_rgb(0,0,0,0.2)]"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="languages-menu-option px-2 py-1.5 cursor-default hover:bg-gray-500/50 rounded-sm">
            <a href={`/${THEME_CODES[theme]}/`}>{theme}</a>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #languages-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  const languagesMenu = document.getElementById("languages-menu");

  const getLanguagePreference = () => {
    return window.location.pathname.replaceAll("/", "");
  };

  const updateIcon = (languagePreference) => {
    document.querySelectorAll(".languages-toggle-icon").forEach((element) => {
      console.log({ element, languagePreference });
      element.id === languagePreference
        ? element.classList.remove("hidden")
        : element.classList.add("hidden");
    });
  };

  const updateLanguage = () => {
    const languagePreference = getLanguagePreference();
    console.log({ languagePreference });

    updateIcon(languagePreference);
  };

  updateLanguage();

  document.addEventListener("click", () =>
    languagesMenu.classList.remove("open")
  );

  document
    .getElementById("languages-toggle-btn")
    .addEventListener("click", (e) => {
      e.stopPropagation();
      const isClosed = !languagesMenu.classList.contains("open");
      languagesMenu.classList[isClosed ? "add" : "remove"]("open");
    });

  document.querySelectorAll(".languages-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      updateLanguage();
    });
  });

  document.addEventListener("astro:after-swap", () => {
    updateLanguage();
  });
</script>
