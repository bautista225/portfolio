---
import { URLS } from "../data/intro";
import { getLangFromUrl, useTranslations } from "../i18n/utils";
import LanguageSelector from "./LanguageSelector.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const navItems = [
  {
    title: t("nav.intro"),
    label: "intro",
    url: "#intro",
  },
  {
    title: t("nav.experience"),
    label: "experience",
    url: "#experience",
  },
  {
    title: t("nav.projects"),
    label: "projects",
    url: "#projects",
  },
  {
    title: t("nav.contact"),
    label: "contact",
    url: `mailto:${URLS.email}`,
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-5 md:mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full border border-white/10 text-gray-200 justify-center items-center bg-neutral-900/40 backdrop-blur-sm"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-purple-400"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <LanguageSelector />
  </nav>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Highlight the name of section in navbar when the viewport is on that section.

    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      threshold: 0.5,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>
